<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Lotj_Screen_Split"
   author="Xavious"
   id="93068d80a35c123ed55376ba"
   language="Lua"
   purpose="Splits screen on scroll"
   date_written="2010-01-11 10:04"
   requires="4.37"
   version="2.0"
   >

</plugin>

<timers>
  <timer second="0.50" 
         enabled="y" 
         script="heartbeat"
         >
  </timer>
</timers>



<!--  Script  -->
--Original concept by Nick Gammon. Modified to more closely immitate C-Mud and also preserve gags (todo)

<script>
<![CDATA[


require "copytable"

-- configuration

-- window size in pixels
WINDOW_WIDTH = GetInfo(250)
WINDOW_HEIGHT = 200 

MAX_LINES = 20 -- how many lines to store

-- font
FONT_NAME = GetInfo(20)
FONT_SIZE = GetInfo(243)

-- where to put the window
WINDOW_POSITION = 10  

-- colours
WINDOW_BACKGROUND_COLOUR = 0x000000

-- offset of text from edge
TEXT_INSET = 5

-- where to store the chat line
lines = {}  -- table of recent chat lines

function heartbeat (timername)
  
  if GetInfo (113) then
    -- display window if output window paused and we have something to show
    WindowShow (win,  GetInfo (114) and #lines > 0)
  end -- if world active
  
end -- heartbeat

-- hide window on removal
function OnPluginClose ()
  WindowShow (win,  false)  -- hide it
end -- OnPluginClose

-- hide window on disable
function OnPluginDisable ()
  WindowShow (win,  false)  -- hide it
end -- OnPluginDisable

-- show window on enable
function OnPluginEnable ()
  if #lines > 0 then
    WindowShow (win,  true)  -- show it
  end -- if
end -- OnPluginEnable

function OnPluginSaveState ()
  -- save window current location for next time  
  movewindow.save_state (win)
end -- function OnPluginSaveState

-- display one line
function Display_Line (line, styles)

 
  local left = TEXT_INSET
  local top = (line - 1) * font_height
  
  for _, v in ipairs (styles) do
    left = left + WindowText (win, "f", v.text, left, top, 0, 0, v.textcolour)
  end -- for each style run                 

 
end -- Display_Line

-- here on chat line
--function chat_handler (name, line, wildcards, styles)
function OnPluginScreendraw (type, log, line)
  --require "tprint"
  local line, total_lines
  total_lines = GetLinesInBufferCount ()
  for line = total_lines - 20, total_lines do
	if GetStyleInfo(line) and GetLineInfo(line, 1) then
      FillWindow(GetLineInfo (line, 1), GetStyleInfo(line))
	end
  end
  
end 
 
function FillWindow(line, styles)
  -- blank existing window contents
  WindowRectOp (win, 2, 0, 0, 0, 0, WINDOW_BACKGROUND_COLOUR)
  WindowRectOp (win, 5, 0, 0, 0, 0, 5, 15)
  
  local avail = 0
  local line_styles
  
  -- blank line? force one entry
  if #styles == 0 then
    -- remove first line if filled up
    if #lines >= MAX_LINES then
      table.remove (lines, 1)
    end -- if 
    table.insert (lines, {})
  end -- if
  
  -- keep pulling out styles and trying to fit them on the current line
  
  while #styles > 0 do
  
    -- no room available? start new line
    
    if avail <= 0 then
      -- remove first line if filled up
      if #lines >= MAX_LINES then
        table.remove (lines, 1)
      end -- if 
      avail = WINDOW_WIDTH - (TEXT_INSET * 2)
      line_styles = {}
      table.insert (lines, line_styles)
    end -- line full

    -- get first style, work out how long it is
    local style = table.remove (styles, 1)  -- pull out first style
    local width = WindowTextWidth (win, "f", style.text)  -- how long this style is

    -- if it fits, copy whole style in
    if width <= avail then
      table.insert (line_styles, style)
      avail = avail - width
    else -- otherwise, have to split style
    
      -- look for trailing space (work backwards)
      -- remember where space is
      
      local col = style.length - 1
      local split_col
      
      -- keep going until out of columns
      
      while col > 1 do
        width = WindowTextWidth (win, "f", style.text:sub (1, col))
        if width <= avail then
          if not split_col then
            split_col = col  -- in case no space found, this is where we can split
          end -- if
          
          -- see if space here
          if style.text:sub (col, col) == " " then
            split_col = col
            break
          end -- if space
        end -- if will now fit
        col = col - 1
      end -- while
          
      -- if we found a place to split, use old style, and make it shorter
      -- also make a copy and put the rest in that
      if split_col then
        table.insert (line_styles, style)
        local style_copy = copytable.shallow (style)
        style.text = style.text:sub (1, split_col)
        style.length = split_col 
        style_copy.text = style_copy.text:sub (split_col + 1)
        style_copy.length = #style_copy.text
        table.insert (styles, 1, style_copy)
      else
        if next (line_styles) == nil then
          table.insert (line_styles, style)
        else
          table.insert (styles, 1, style)
        end -- if
      end -- if    
    
      avail = 0  -- now we need to wrap
      
    end -- if could not fit whole thing in
          
  end -- while we still have styles over
  

  -- display all lines
  
  local first_visible = #lines - visible_lines
  if first_visible < 1 then
    first_visible = 1
  end -- if
  
  local count = 0
  for i = first_visible, #lines do
    count = count + 1
    Display_Line (count, lines [i])
  end -- for
  
  -- force window redisplay
  --WindowShow (win,  true)  -- show it 
               
end -- end chat_handler

-- startup stuff

win = GetUniqueID ()  -- get a unique name

-- make the window
WindowCreate (win, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_POSITION, 0, 
                         WINDOW_BACKGROUND_COLOUR)  -- create window
               
-- grab a font
WindowFont (win, "f", FONT_NAME, FONT_SIZE) -- define font

-- work out how high it is
font_height = WindowFontInfo (win, "f", 1)   -- height of the font  

-- work out how many lines will fit
visible_lines = math.floor (WINDOW_HEIGHT / font_height) - 1

--Set Layer
WindowSetZOrder(win, -1);

]]>
</script>
</muclient>